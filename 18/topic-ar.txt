#### السلام عليكم أصدقائي,

* ### فهرس المواضيع السابقة:

  https://macdiscussions.udacity.com/t/topic/86623

* ### أليس الزبون يستحق أن يرى ما تقوم به ؟

  بالتأكيد, يجب أن يرى الزبون العمل بشكل متواصل, لكي يعطيك تعليقاته حول الموضوع.

  يجب عليك الإعتياد على العمل في بيئة Agile software development بمعنى ما تقوم به يجب أن يكون قابل للتغيير بشكل متواصل.


  * #### ماهي Agile ؟

    هي آلية عمل على المشاريع, بحيث تهتم بأن يكون الزبون (وملاحظاته) أهم جزء من عملية بناء المشروع.

    يتغير المشروع, حسب متطلبات الزبون بشكل سريع وبدون مماطلة !

  * #### هل تذكر نظام الذي تعلمته في الجامعة في بناء مشروع ؟

    إذا كنت عملت في مشروع جامعي (مشروع تخرج), أغلب الجامعات ستعلمك أنه يجب عليك التخطيط جيداً للمشروع... سيأخذ منك ربما ثلاثة أشهر للإنتهاء من التخطيط بعناية.

    العديد من الناس يعتمد هذه الآلية في حياته العملية في بناء المشاريع.

  * #### ولكن هل الطريقة هذه هي الصحيحة ؟

    لا يمكنني أن أقول أنها طريقة صحيحة أم خاطئة.

    ولكن **حسب رأيي**, هي طريقة سيئة جداً في التعامل مع المشاريع الحقيقية !

    فبدلاً من تضييع الوقت في عمل مخططات لمدة ثلاثة أشهر, الأفضل أن يتم تخطيط المشروع بسرعة واحتساب جميع التكاليف وجدوى المشروع بأسرع وقت, ثم مباشرة **بدء العمل عليه ليتم متابعته من قبل الزبون**.

    أغلب الأحيان **التخطيط الزائد** الذي لا طائل منه, **يقتل المشروع** الذي تعمل عليه !

  * #### كيف يراجع الزبون المشروع ؟

    ببساطة تقوم ببناء المشروع, وترسله للزبون ليقوم بمراجعته, ثم يخبرك بالتعديلات وتقوم بها... ثم ترسله مرة أخرى وهكذا :smile:

    ![image](/uploads/default/original/3X/6/7/67924a91e2fd8693b9d887e32d26ca1e5021eeaf.png)

    كما تلاحظ, كل مرة تقوم بها بالعملية (تصميم, تطوير, تجربة, اكتشاف)... تسمى Sprint.

    وفي كل sprint, يتم عمل إصدار آخر.

  * #### مالفائدة من هذا كله ؟

    الغرض الأساسي هو رضا الزبون بالنتيجة, لأنه هو من يقرر وهو جزء أساسي في تطوير البرنامج.

    كيف لا يقبل الزبون بالعمل وهو من ساعدك بالقيام به :smile: 

* ### أعتقد أنك الآن تدرك أهمية عمل إصدار مبكر Early Deployment

  * #### ماهي deploy ؟

    نقصد بكلمة deploy (إصدار), المرادف لها هو publish.

    أي أن deployment هي مرحلة نشر المشروع على النت, ليستطيع الزبون مشاهدته.

* ### قبل عمل deploy هل نحتاج للقيام بشيء آخر ؟

  * #### نعم سنحتاج القيام ببعض التنظيف للمشروع.

  * #### ماهي أول خطوة ؟

    سنحتاج عمل repository جديد على github لوضع المشروع فيه بشكل مباشر, لأننا حالياً لدينا المشروع في مجلد forums وهو شيء غير جيد... وإنما كان لغرض جعل ملفات الورشة قابلة للوصول من مكان واحد فقط.

  * #### ماذا نسمي الـ repo ؟

    قمت بتسميتها forums-flask.

  * #### هل نحتاج ملفات إضافية ؟

    نعم سنقوم بعمل ملف run.py في المجلد الرئيسي للمشروع يعمل منه المشروع في أقل عدد من الأسطر:

    ```
    from app import app

    if __name__  == "__main__":
        app.run()
    ```

     كما تلاحظ أنني قمت بقص الكود من app.py إلى هنا, ليقوم هذا الملف باستيراده وتشغيل المشروع مباشرة, بدون معرفته بقية التفاصيل.

     حينما تقوم بتشغيل المشروع مستقبلاً, ستقوم فقط بتشغيل هذا الملف.

   * #### ماذا نحتاج أيضاً ؟

     سنقوم أيضاً بتسمية الملف app.py إلى:

         __init__.py

     ثم سنقوم بعمل مجلد اسمه app بحيث يكون هذا الملف هو أول ملف يشتغل في هذا داخل الـ package.

       * #### ما معنى package ؟
          في بايثون, package تعني مجلد, في حالتنا قمنا بعمل مجلد اسمه app سيكون هو الـ package.

          ويسمى ملف كود بايثون py بـ module.

         أي أن الـ package (المجلد), يحتوي على العديد من الـ modules (ملفات).

       * #### ماهو أول ملف يعمل في package حينما نقوم بعمل import ؟

          أول ملف يشتغل عندما نقوم بعمل import للـ package بهذا الشكل:

             from app import app

          هو ملف:

             __init__.py

         لهذا قمنا بتسمية الملف app.py بهذا الشكل.

         النتيجة النهائية:
         ![image|384x435](upload://33VGRtp68NW3Sc4pE2lW9sFMwxV.png)

       * #### أين سنضع محتويات المشروع ؟

          كما تلاحظ, قمت بوضع محتويات المشروع داخل مجلد app (بدلاً من الاسم السابق forums).

       * #### ماذا عن مجلد venv ؟

         هذا المجلد قام بإنشاء PyCharm لعمل بيئة وهمية, ولكن لا نريد رؤيته على GitHub... لذا سنقوم ببساطة بعمل ignore له داخل ملف .gitignore بإضافة هذه الأسطر:


             # virtual environment
             venv

       * #### لكن كيف نضيف الأدوات المطلوبة مثل flask حينما نقوم بإصدار البرنامج ؟

         يجب أن نقوم بعمل ملف requirements.txt في المجلد الرئيسي للمشروع بحيث يحتوي على الـ packages المطلوبة ورقم النسخة بهذا الشكل:

             Flask==0.12.2

         بعد إضافتها, ستلاحظ PyCharm يطلب منك إضافة flask للمشروع في حال لم تضيفه:
            ![requirements|690x326](upload://5sn2JdCKYvovuong5acmn1LHzuo.png)

       * #### ليس لدينا مجلد forums يعني يجب أن نصلح الـ imports, صحيح ؟

          بالتأكيد, لأننا كنا نكتب:

             from forums import stores

          معناه, (من مجلد forums), (استورد الملف stores)... سنقوم بتغييرها في جميع الملفات إلى:

             from app import stores, dummy_data, models
             from app import views
             from app import models

       * #### هل يوجد شيء آخر في حال كنت أستخدم PyCharm ؟

         نعم, يوجد أيضاً مجلد اسمه .idea, يجب عليك إضافته للـ gitignore لتجاهله:

             # PyCharm
             .idea


       * #### هل نحن جاهزين ؟

         نعم, جرب ملف tests.py وتأكد من نجاح كل الاختبارات, وأيضاً قم بتشغيل الموقع من ملف run.py وتأكد أنه يعمل.
 
       * #### كيف سيكون شكل الناتج النهائي ؟

         قمت بعمل repo على حسابي github لترى الناتج النهائي:

         >https://github.com/0xRumple/forums-flask

* ### كيف سنقوم بنشر (deploy) المشروع ؟

  * #### نحتاج خدمة لنشر المواقع, صحيح ؟

     نعم, سنقوم باستعمال **خدمة مجانية** اسمها Heroku.

  * #### ماهو Heroku ؟

     ببساطة هو خدمة cloud (سحابية) لنشر تطبيقات الويب بسهولة كبيرة جداً.

     يجدر الإشارة أن Heroku مبني على الخدمة السحابية الشهيرة Amazon Web Services - AWS.
     ولكنه **أسهل بكثير** من AWS !

  * #### كيف أسجل على Heroku ؟
     من موقعه الرسمي:
     > https://www.heroku.com

     ثم قم بتفعيل الإيميل الذي سجلت به.

  * #### كيف سنتعامل مع Heroku ؟

    يوفر Heroku أكثر من طريقة للتعامل معه, ولكننا سنستعمل Heroku CLI.

  * #### ماهو Heroku CLI ؟

    هو واجهة لكتابة الأوامر Command Line Interface CLI, مثلما تتعامل مع git bash :smile:

   * #### كيفية تحميل Heroku CLI ؟

     من هنا:
     > https://devcenter.heroku.com/articles/heroku-cli

  * #### كيف أقوم بالدخول على حسابي من Heroku CLI بعد تنصيبه ؟

    الأمر سهل جداً فقط تكتب الأمر heroku login وتدخل مباشرة, هنا صورة متحركة:

    ![heroku%20login|690x433](upload://ynec5dGfFcZG9Uxw2P3RrjzfyuM.gif)

    لإظهار العنصر open command line here, يجب الضغط على shift + الزر الأيمن للفأرة.

     > shift + right click

  * #### كيف أنشأ تطبيق على Heroku ؟

    فقط تكتب heroku create وهو سيقوم مباشرة بعمل التطبيق باسم مناسب, وسيقوم بعمل رابط (دومين) خاص به... بهذه البساطة !

  * #### مالذي حصل عندما قمنا بعمل heroku create ؟

    سيقوم heroku بعمل repository خاصة به, لتصبح هي المكان الذي ترسل إليه المشروع.

  * #### كيف أتحقق هل تم إنشاء المشروع ؟

    إذهب إلى لوحة التحكم الخاصة بحسابك من هنا:

    > https://dashboard.heroku.com/apps

    وسترى التطبيق موجود أمامك :smile:

    ![image|534x375](upload://1dfqZSWSTfnTrc1SyHhWVxWWEjd.png)


  * #### لماذا نحتاج git repository أخرى على heroku ؟

    يستعمل heroku هذا المستودع repository لترسل إليه التطبيق خاصتك, وهو سيقوم ببناءه بشكل أوتوماتيكي.

  * #### كيف أرسل deploy التطبيق (المنتدى) الذي قمنا بعمله ؟

    يجب أولاً أن تفتح cmd باستعمال open command line here لكي يفتح في المكان المناسب, أو استعمل cd لتصل إلى المجلد الرئيسي للمشروع.

    ويجب أن تقوم بعمل stage ==> commit ==> push إلى github ليكون كل شيء جاهز.

    وبعدها تقوم بعمل git push heroku master, لإرسال التطبيق إلى heroku, هذه صورة متحركة للأمر:

   ![heroku%20create|690x433](upload://6vG6bMQfoRjv04tAV37VjUrov9q.gif)

   كما تعرف, المشروع على heroku هو عبارة عن git repository أي أنك ستقوم بإرسال مشروع git خاصتك إليه باستعمال الأمر السابق.

  * #### كيف أقوم بفتح المشروع ؟

    فقط انسخ الرابط, أو من لوحة التحكم ستجد زر open app يسمح لك بفتح المشروع:

    ![image|620x354](upload://hcUZhMlS7ArLWncgGXvDQTdkxKx.png)

  * #### المشروع لا يعمل, مالمشكلة ؟

    إذا ظهرت لك رسالة application error لا مشكلة, نحن نتعلم بعمل الأخطاء :smile:

    الأمر أنه كود بايثون موجود, ولكن لا يوجد ما يقوم بتشغيله :sweat_smile:

    سنحتاج لإضافة Gunicorn إلى مشروعنا.

* ### إضافة Gunicorn ؟

   * #### بما يقوم Gunicorn ؟

     هو فقط يقوم بتشغيل كود البايثون, ويخبر السيرفر ماهو الملف الذي سيبدأ منه المشروع, في حالتنا run.py.

   * #### كيف نقوم بإضافته للمشروع ؟

     فقط, اكتب في ملف requirements.txt سطر جديد:

         Flask-Gunicorn==0.1.1

   * #### كيف سيعرف البرنامج الملف الأول للتشغيل ؟
 
     لا يوجد شيء اسمه سحر لكي يعرف, يجب أن تخبر البرنامج في ملف اسمه Procfile, وتكتب أين سيبدأ (في حالتنا run.py):

         web: gunicorn run:app

     **تنبيه مهم**: ملف Procfile **لا يتبع باللاحقة txt** أو أي شيء آخر, فقط Procfile بهذا الشكل:

     ![image|524x230](upload://gyys49hrxRPjMkUZ80LWkE1Dxrf.png)

* ### الآن البرنامج جاهز, كيف نقوم بتحديثه ؟

  قم بعمل stage ==> commit ==> push

  ثم أكتب الأمر من جديد:
  ```
  git push heroku master
  ```

  ثم افتح الرابط, ستجد أنه يعمل بنجاح... تهانيا :smile:

   رابط التطبيق الخاص بي:

   >https://warm-meadow-14996.herokuapp.com 

* ### ماهي المهمة المطلوبة ؟

  * قم بعمل repo جديدة.
  * نظف المشروع كما شرحنا بالأعلى.
  * قم بعمل push على GitHub للمشروع.
  * قم بعمل Deploy للمشروع على Heroku.
  * شاركنا رابط المشروع الذي نشرته.
  * في حال واجهتك مشاكل, تأكد من أن مجلدات المشروع كما شرحت بالأعلى.
  * لا تتردد بطرح أسئلتك.

* ### ملحق:

  * كيف تخطط لمشروعك:
       https://informatic-ar.com/agile_planning/
  * مصدر الصورة بالأعلى (Agile):
       https://www.neotys.com/blog/automated-performance-testing/
  * أفضل الـ practices في Scrum Framework إحدى أشهر فريمورك Agile:
       https://github.com/janpetzold/scrum-best-practices
  * عمل deploy على Heroku:
       https://www.youtube.com/watch?v=pmRT8QQLIqk
       https://medium.com/@johnkagga/deploying-a-python-flask-app-to-heroku-41250bda27d0
  * تجهيز ملف Procfile:
       https://devcenter.heroku.com/articles/python-gunicorn

 * ### كيفية تسليم الحل ؟

    ارفع التحديثات على حسابك في GitHub في نفس المستودع (repository), **بالتعديل على نفس الملفات**.

   ولا تنسى **مشاركة رابط المشروع** معنا.

    بإمكانك تسليم الحل في هذا الموضوع:
    https://macdiscussions.udacity.com/t/34-early-deployment/120583


* ## شكر خاص:

   شكر خاص للأخوة @ahmedalrifai @hichem2h @LouayHamada على تعاونهم في مراجعة أعمال المشاركين . 

  لولا وجودهم, لما رأت هذه الدروس النور :smile:   

  #### أتمنى الفائدة والتوفيق للجميع!