#### السلام عليكم أصدقائي,

* ### فهرس المواضيع السابقة:

  https://macdiscussions.udacity.com/t/topic/86623

* ### ماذا نقصد بالإرتباط المتواصل Continuous Integration ؟

  ببساطة, هي إحدى الأسس في التطوير على بيئة Agile, بحيث يتم تسليم المشروع إلى الزبون بشكل متواصل, لجعل الزبون قادر على متابعة عملك بشكل متواصل وسلس.

  * #### ماذا تقصد بالضبط ؟

    هل تذكر عملية git push إلى heroku, كانت مرهقة أليس كذلك ؟

    لذا سنجعل Heroku يقوم بتحديث الموقع كلما نقوم بعمل push إلى GitHub !

  * #### كيف نقوم بها ؟

    الأمر سهل جداً... 
    > أي شيء سهل, **حينما تعرف كيف** :smile:  

    * ##### فقط أفتح موقع Heroku وافتح التطبيق خاصتك, ثم اختر deploy:

    ![heroku-deploy|676x499](image-1.png)

    * ##### ثم اختر GitHub ==> Connect to GitHub:

    ![github-connect|607x500](image-2.png)

    * ##### ثم قم بعمل authorize للسماح لـ Heroku بالإرتباط بـ GitHub:

    ![github-auth|606x387](image-3.png)

    * #### كيف سنحدد الـ repository ؟

      ![github-search|670x140](image-4.png)
      ![github-repo-connect|690x315](image-5.png)

    * #### كيف تعرف إذا كان مرتبط بالـ GitHub ؟

      سيظهر لك بهذا الشكل:

      ![github-connected|690x119](image-6.png)

    * #### كيف أقوم بجعله يقوم بعمل تحديث للمشروع كلما أقوم بعمل push على GitHub  ؟

      فقط تضغط على enable auto deploy
      ![auto-deploy|476x382](image-7.png)

* ### مالذي قمنا بعمله ؟

  قمنا بربط الموقع بشكل متواصل مع أي عملية push تقوم بها على حسابك في GitHub, يعني أننا الآن لن نستعمل heroku cli والأوامر المملة.

  حقيقة, لا أنصحك باستعمال heroku cli, فقط تعلمنا الطريقة لأغراض تعليمية (لفهم كيف يعمل).

  دائماً اربط heroku مع github لكي يسهل لك التعامل معه بشكل أبسط وأسرع.

  * #### ولكن معناه أنني حينما أقوم بعمل push لـ bug سيتعطل الموقع, صحيح ؟

    نعم, صحيح.

    لهذا **لا تقم أبداً بعمل push مباشرة إلى master branch**.

  * #### ماهي القاعدة الأولى لاستعمال git ؟

    لأهمية الأمر, أكرره مرة أخرى... **لا تقم بعمل push إلى master branch, أبداً**.

    وماهي القاعدة الثانية ؟

    مجدداً, **لا تلمس master branch بشكل مباشر**... أصبح الأمر مملاً :smile:

  * #### ولكن لما لا أقوم بعمل push إلى الـ master branch ؟

    لأن master يكون فيه فقط production code... يعني **الكود الجاهز للإطلاق والنشر**.

  * #### ماذا تقصد ؟

    ببساطة إذا قمت بعمل push لكود خاطئ إلى master, سيقوم heroku بتحديث الموقع خاصتك, ويراه الزبون :scream:

    لأن heroku مربوط مع master branch.

    لذا كن حذرا أثناء تعاملك مع master.

  * #### ماهو الـ branch الذي يمكنني إرسال أكواد تجريبية (خاطئة) عليه ؟

    يمكنك استعمال فرع جديد branch تسميه develop.

    هذا يوصلنا للحديث عن GitFlow.

* ### ماهي GitFlow ؟

  هي استراتيجية للتحكم بالـ repository خاصتك, بحيث تعتمد على استعمال فروع بشكل منظم جداً.

  قام بطرحها شخص يسمى Vincent Driessen في 2010 وتم اعتمادها في موقع GitHub نفسه.


  * #### كيف تبدو هذه الـ workflow ؟

  ![image](image-8.png)

  كما ترى في الصورة, فإنه يتم التعامل مع master فقط لإصدار النسخ 0.1 و 0.2... إلخ.

  وفي develop يتم تطوير البرنامج بشكل متواصل.

  * #### كيف يمكنني تطبيقها في GitKraken ؟

    كون هذه الـ workflow ممتازة جداً, تم دمجها في GitKraken وأغلب البرامج الأخرى.

    هنا فيديو لكيفية استعمالها (شاهد الفيديو لتطبيق المهمة):

    https://www.youtube.com/watch?v=eTOgjQ9o4vQ

  * #### بماذا تخبرنا gitflow ؟

    ببساطة كما شاهدت في الفيديو, بها ستتجنب إرسال التحديثات إلى master بشكل مباشرة, وإنما ستقوم بعمل merge من الفروع الأخرى.

  * #### مالذي يجب أن لا تنساه عند استعمال gitflow ؟

    لا تنسى عمل checkout على الفرع develop للعمل عليه, لكي لا تذهب الـ commits مباشرة إلى master.

    ![image|690x371](image-9.png)

  * #### ماهي الـ branches المستعملة في gitflow ؟

    * #### ما فائدة hotfix ؟

      حينما يخبرك الزبون بوجود مشكلة bug على الموقع, مباشرة تقوم بعمل start hotfix على gitkraken ثم تقوم بحلها, ثم تقوم بعمل finish hotfix ليتم دمجها في master.

     * #### ما فائدة feature ؟

       إذا أردت إضافة خاصية جديدة إلى برنامج, فهذه هي الطريقة, فقط من gitflow ==> start feature.

       وحينما تنتهي منها تقوم بعمل finish feature.

     * #### ما فائدة release ؟

       حينما أنت جاهز لإصدار نسخة لإرسالها إلى master, فقط قم بعمل start release ثم تأكد منه إذا كان جاهز, ثم finish release.

     * #### لا تنسى عمل tag على الإصدار الجاهز.

     * #### ماذا أيضاً يجب علي تذكره ؟

       هل تذكر حينما أخبرتك أمك بترك المكان نظيف عندما تنتهي.

       لا تنس نصيحتها, وقم بحذف أي branch غير develop حينما تنتهي من العمل على شيء معين... بحيث يبقى لديك في الأخير اثنان branches فقط develop و master.


* ### ماهي فائدة كل هذا ؟

  نظام git هو اساساً للحفاظ على التاريخ history... تاريخ تطوير البرنامج.

  ما نقوم به الآن هو الحفاظ على التاريخ بشكل منظم, بحيث كل إضافة تتم في feature وكل إصدار في release وكل إصلاح لمشكلة في hotfix.

  تخيل كيف سيصبح تاريخ برنامجك في الفترة التي تعمل عليها بهذا الشكل... سيصبح **تحفة فنية** !

* ### مالنتيجة التي يجب الحصول عليها من merging ؟

  سيكون الناتج بهذا الشكل:

  ![merge-result|517x89](image-10.png)

* ### ماذا إن قمت بإرسال التعديلات مباشرة إلى master ؟

  الأمر سهل, فقط قم بعمل rebase بهذا الشكل:

  ![rebase|690x346](image-11.png)

  #### لا تنسى:
  عمل rebase سيحذف كل التغييرات إلى المكان الذي ترجع إليه... قم **بعمل نسخة من المشروع** قبل عمل rebase.

  بعد عمل rebase قم بالقيام بالخطوات بشكل صحيح, بدون pushing into master.

* ### ماهي المهمة المطلوبة ؟

  * قم بعمل continuous integration على حسابك github و heroku.
  * قم بتطبيق gitflow workflow.
  * قم بالدخول checkout على develop.
  * قم بعمل release جديدة (الإصدار 1.0.0).
  * عدل ملف index.html وأكتب عليه:

        <h4>Done by: <your-name></h4>

      بحيث تكتب اسمك (في الـ header أو footer).

  * اعمل finish release وقم بعمل push للتعديلات الجديدة (على GitHub ).
  * تأكد من أن الموقع تم تحديثه (بدون عمل git push heroku master), بحيث سيأخذ التعديلات من GitHub مباشرة بدون تدخلك.
  * قد يأخذ الأمر وقت (5 دقائق) ليتم تحديث موقعك عند عمل push إلى GitHub.

* ### ملحق:

  * مقالة gitflow التي نشرت عام 2010:
     http://nvie.com/posts/a-successful-git-branching-model/
  * فيديو حول continuous integration:
     https://www.youtube.com/watch?v=xSv_m3KhUO8
  * أشهر الأدوات لعمل continuous integration مرشحة من GitHub (ربما يوجد خدمات أفضل وأرخص, ولكن تم التعاقد مع شركة GitHub بنشرها):
     https://github.com/marketplace/category/continuous-integration
  * فيديو continuous integration مع heroku:
     https://www.youtube.com/watch?v=wZR5WDidTyQ

 * ### كيفية تسليم الحل ؟

    ارفع التحديثات على حسابك في GitHub في نفس المستودع (repository), **بالتعديل على نفس الملفات**.

   ولا تنسى **مشاركة رابط المشروع** معنا.

    بإمكانك تسليم الحل في هذا الموضوع:
    https://macdiscussions.udacity.com/t/36-continuous-integration/121992

  #### أتمنى الفائدة والتوفيق للجميع!