#### السلام عليكم أصدقائي,

* ### فهرس المواضيع السابقة:

  https://macdiscussions.udacity.com/t/topic/86623

* ### لماذا قمنا ببناء الـ Entities ؟
  الغرض أننا سنقوم الآن بعمل مخازن (Stores) لهذه البيانات, لكي نستطيع القيام بالتعامل مع البيانات حسب العمليات المطلوبة (requirements) في المشروع الذي طرحناه في الورشة .

* ### كيف سنقوم بالتعامل مع البيانات ؟
  سنقوم ببناء مخازن لهذه البيانات تستطيع القيام بجميع المهام المطلوبة, سنحتاج أولاً المهام الأساسية (إضافة, تعديل, تحديث, حذف) (Create Read Update Delete) تعرف بالاختصار CRUD.

* ### ما الذي سيحتويه كل مخزن (store) ؟

  سيحتوي على العمليات الأساسية وهي CRUD بمعنى (Create, Read, Update, Delete) لكل entity.
  مثال:
  سنقوم بعمل مخزن للأعضاء Member Store, سيكون شكله النهائي هكذا:
  ```
  class MemberStore:

    members = []

    def get_all(self):
        # get all members

    def add(self, member):
        # append member

    def get_by_id(self, id):
        # search for member by id

    def update(self, member):
       # update member data

    def delete(self, id):
        # delete member by id

    def entity_exists(self, member):
        # checks if an entity exists in a store
  ```

* ### أين سنخزن البيانات ؟

  * #### قاعدة البيانات (database) ؟
    ربما تعتقد أننا سنستخدم قاعدة بيانات (database), **سأخبرك: لا, ليس الآن** !

    سنقوم بتخزين البيانات حالياً في الذاكرة (باستعمال list), أي أن **اغلاق التطبيق الذي سنصنعه يحذف كل البيانات عند كل إعادة تشغيل للتطبيق**.

  * #### كيف سنقوم بعمل list ؟
    الأمر سهل جداً:
    ```
    class MemberStore:
			
        members = []
    ```

    هنا لم نقم باستعمال الـ initializer في كل كلاس (__init__), إنما استعملنا خاصية (attribute), معناه أن أي store ننشأه لديه نفس القائمة من 
  الأعضاء members... بمعنى سنصل إليه هكذا:
    ```
    MemberStore.members
    ```
    لاحظ أننا نصل إليه بدون self لأنه غير متعلق بأي object سواء member_store1 أو member_store2, أي أن الـ list هي نفسها في كل المخازن !

  * #### مالفائدة من عدم استعمال قاعدة البيانات (db) واستعمال list ؟
      الغرض هو أن ما سنكتبه كود نظيف (clean code) غير ملصق بقاعدة البيانات.

      أصلاً يجب على البرنامج أن **لا يعرف بوجود قاعدة البيانات**, هو فقط يجب أن يعرف بمخزن (store) يقوم بالمهام المعينة بأي شكل من الأشكال (سواء قاعدة بيانات أو أي شيء آخر). أي أن البرنامج متصل بـ store فقط.

      بهذا الشكل:
      ```
      member_store = MemberStore()
      member_store.add(member1)
      member_store.add(member2)

      print(member_store.get_all())
      ```

      أي أننا متى ما أحببنا إضافة قاعدة بيانات, فقط سنغير في الـ store... بحيث يقوم بالاتصال بقاعدة البيانات والقيام ببقية المهام داخل قاعدة البيانات. والبرنامج سيعمل بدون مشاكل, لأنه وجود قاعدة بيانات أو عدم وجودها ليس له علاقة (هو فقط يتعامل مع الـ store). 

       تسمى هذه التقنية Abstraction... أي أن التفاصيل مخفية عن البرنامج !

       ![image](/uploads/default/original/3X/5/c/5c57e48ef33bc8ebe24236b8e043c93133fb47e7.png)

       لاحظ في الصورة البرنامج يتعامل مع الـ Store (أو يسمى Repository), والـ Store يتعامل مع أي شيء آخر.
       *مصدر الصورة (http://tupilabs.com).

* ### هل فقط ما سيحتويه الـ Store هو عمليات CRUD ؟

  لا, فعمليات CRUD لا تكفي (Create, Read, Update, Delete) :smile:
 
  سنحتاج أيضاً **بناء على المتطلبات**, أشياء أخرى.
  
  مثلاً سنحتاج أن نضيف دالة في الـ MemberStore لاظهار أفضل عشرة أعضاء (top 10), وأيضاً نقاط أخرى, ولكن سنبدأ بعمليات CRUD لكل Entity.

* ### هل سنغير من الـ Models أثناء عمل الـ Stores ؟

  بالتأكيد, لأننا سنلاحظ أننا نحتاج اضافة متغيرت أخرى, لجعل دوال الـ store تعمل, مثلاً:

  كيف يمكنك معرفة أكثر الأشخاص مشاركة (top 10), وأنت لا تعرف ماهي مشاركاتهم ؟
  الحل يكمن في اضافة list داخل الـ class الخاص بالـ member نضع فيه مشاركات العضو (member_posts).

  إذا سيتطلب منا تعديل الـ models مع الوقت... **ببساطة لأن تصميم الـ models لم يكن كافي** :wink:

* ### ماهي المهمة المطلوبة ؟

  * قم بعمل store خاص بالأعضاء member (بالتأكيد سيكون class كما وضحت بالأعلى).
  * اكتب دالة اضافة العضو إلى الـ list, بحيث يكون اسمها add.
  * اكتب دالة الحصول على جميع الأعضاء في القائمة, بحيث يكون اسمها get_all.
  * قم بعمل store خاص بالمواضيع (post) فيه نفس الدوال السابقة.
  * في ملف main.py, اضف استعمال للـ stores التي كتبتها (بإضافة العضوين والثلاثة المواضيع التي عملناها سابقاً).

* ## كيفية تسليم الحل ؟

  بإمكانك تسليم الحل في هذا الموضوع:

  https://macdiscussions.udacity.com/t/16-stores/98197

* ## لا تفسد المتعة :smile::

  في حال كان حلك جاهز قم برفعه على حسابك في GitHub في التوقيت المطلوب.

  في حال لديك أي استفسارات, بإمكانك طرحها هنا وسأكون سعيد بالإجابة عليها :wink:

  #### أتمنى الفائدة والتوفيق للجميع!