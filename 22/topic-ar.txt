#### السلام عليكم أصدقائي,

* ### فهرس المواضيع السابقة:

  https://macdiscussions.udacity.com/t/topic/86623

* ### مالذي قمنا بعمله إلى الآن ؟

  قمنا باستهلاك الخدمات Consuming API باستعمال javascript (مكتبة jQuery).

  * #### لماذا jQuery ؟

    كما قلت, jquery ليست الأفضل ولكنها سهلة ومستعملة بشكل واسع جداً.
    بإمكانك تجربة framework أخرى مثل Angular أو Vue أو React, سوق العمل يطلبها بشكل كبير جداً جداً.

  * #### مالغرض ؟

    هل لاحظت موقع YouTube:

    ![youtube-spa|690x455](image-1.gif)

    ببساطة هو يستعمل SPA

  * #### ماهو Single Page Application ؟

    يعني أنه تم بناء البرنامج في صفحة واحدة فقط (index.html مثلاً).

    * ### أين بقية الصفحات ؟

      ببساطة, يتم عرضها جزئياً, داخل الموقع, بدون الذهاب إلى صفحة أخرى, نعم يذهب إلى url آخر, **ولكن ليس إلى صفحة أخرى** !

    * ### لما كل هذا التعب ؟

      للحصول على user-experience أجمل... نعم, أحب كثيراً YouTube لأنه يعرض المحتوى بشكل أنيق :smile:

      ما رأيك بتجربة Angular أو غيرها, وتجعل الموقع خاصتك عبارة عن SPA.

  * ### لا تنس أيضاً فصل الملفات !

    عند العمل على سكربتات js, يجب فصلها إلى مجلد static الذي يحتوي على ملفات css و js... بحيث تقوم بالإشارة إليه في index.html بهذا الشكل:

```
<script  src="/static/topic.add.js"></script>
```

* ###  مالذي نحتاجه في مشروعنا ؟

  أعتقد أنك لاحظت أن المشروع لا يقوم بحفظ المواضيع, صحيح ؟

  بالتأكيد فهو يضعها في الذاكرة memory, بمجرد اغلاق تطبيق الموقع, سيتم حذف كل البيانات !

  * #### ماهو الحل ؟

    كلنا نعرفه على ما أعتقد, إنه database :smile:

  * #### ما فائدة الـ database ؟

    تقوم الـ database بالإحتفاظ بالبيانات, بحيث لا تتعلق بالتطبيق (الموقع) خاصتنا, بل ممكن أن يقوم موقع آخر باستعمال نفس قاعدة البيانات.

    أي أنها مجرد طريقة لحفظ لجمع البيانات, والحصول عليها بسهولة بما يسمى database engine (محرك قاعدة البيانات), عن طريق الإستعلامات queries.

   * #### ماذا تسمى عملية جلب البيانات من الـ database  ؟

     تسمى استعلام query, يمكنك **تخيل الـ query على أنها إجابة لسؤال** ما, مثل: كم عدد الموظفين الذي راتبهم أكثر من 5000 دولار ؟

     في حالتنا ممكن نطلب: كم عدد المواضيع الموجودة ؟

     أو: ماهي المواضيع التي كتبها العضو mohammed ؟

   * #### ما الذي يمكن الـ query القيام به ؟

     بإمكان الـ query القيام بالأربع العمليات الأساسية, وهي CRUD Create Read Update Delete.

     كما قمنا بها في stores.py.

    * #### لما أصلاً لدينا stores.py, طالما يمكن لمحرك الـ database أن يقوم بهذه العمليات من خلال queries ؟

      لأننا لا نريد أن نتعامل مع الـ database مباشرة, بل نريد أن نضع كل الـ logic في مكان واحد (stores.py), وهو سيأتي بالبيانات سواء عن طريق database أو غيره.

       * #### مالفائدة ؟

          أرى الكثير من المبرمجين يقولوا أنه أهم جزء في البرنامج هو database, **هذا خاطئ تماماً** !

          جعلها أهم قطعة يجعلك محصور بإمكاناتها, فمثلاً إذا كانت بطئية ستقول للزبون: للأسف إنها بطيئة ويجب عليك تحملها :sweat_smile:

          يجب أن يكون برنامجك قابل للتغير بسهولة, وهذا ما يمنحك القوة في تغييرها وتبديلها **حسب المتطلبات**, وليس حسب ما تمليه على قاعدة البيانات !

          اقتباس من العملاق Uncle Bob:
          >The database is not one of the most important decisions.

           > The database is merely an IO device. It happens to provide some useful tools for sorting, querying, and reporting but those are ancillary to the system architecture.

    * #### إذا كيف سنقوم بها ؟

      سنجعل stores.py هو من يتخاطب مع الـ database, بحيث برنامجنا الأصلي يتعامل مع stores, وهو لا يعرف شيء عن كيف يقوم stores بجلب البيانات وإنما يعرف فقط أنه سيحصل عليها.

* ### كيف ستكون آلية تخزين البيانات داخل الـ database ؟

  يوجد طريقتين لتخزين البيانات وهي

  * #### بيانات لديها علاقات relational data

     معناه أن كل البيانات متعلقة ببعضها البعض, مثلاً موقع twitter بالإمكان تصوره بهذا الشكل:

     ![image](image-2.png)

     بحيث كل عضو user لديه مشاركات tweets, ولديه متابعين followings.

     غالباً البيانات التي نحفظها مرتبطة ببعضها البعض :wink:

  * #### بيانات بدون علاقات non-relational data

     لها أنواع كثيرة, أشهرها هو document model

     ![image|259x302](image-3.jpg)

     بحيث كل عنصر هو عبارة عن document (ربما مكتوب بصيغة JSON).

     * #### لما نحتاج Non-Relational Db ؟

       هي سريعة جداً جداً, هل تعلم أن Udacity يستعملوا MongoDb وهي من أشهر الـ non-relational db, لكي يقوموا بالعمليات الاحصائية والتحليلية analytics للطلاب.

       تخيل لديك 100 ألف طالب, تريد أن تعرف ماهو الـ quiz الذي لم يستطيعوا حله بسهولة, هنا تصبح البيانات ذو علاقات relational db غير قادرة على القيام بهذه العمليات بكفائة, ولكن non-relational تستطيع القيام بها بجدارة عالية بتكفلة أقل !

       اقتباس من أحد الموظفين السابقين في Udacity:

       > MongoDb... The speed. Oh man. The speed. (For what we're doing with it.)
 
       > We dump a lot of activity data into our Mongo database – everything from sign up events, to quiz results, to twitter shares. With all you guys hammering away at our server (we love it!) the data comes pouring in. 

  * #### تبدو non-relational أقوى, تريث قليلاً... فأنت تحتاج لـ relational أيضاً :smile:

    لا يوجد شيء اسمه أقوى, وإنما يجب أن **تختار التكنولوجيا المناسبة لما تقوم به** !

    لا أعتقد أنه بإمكانك فهم non-relational بدون فهم relational, وأيضاً في حالتنا relational تخدم ما نقوم به بشكل أفضل... 

    لأنه من البداية لدينا علاقة one-to-many بالنسبة للأعضاء والمواضيع بحيث كل عضو لديه أكثر من موضوع member-to-posts.

* ### كيف يتم تخزين البيانات ذو علاقات relataional data ؟

  يتم تخزينها في ما يسمى جداول tables.

  * #### ماهي tables ؟

    ببساطة هي طريقة لعرض البيانات بشكل مستطيل rectangle data-structure, مثال على كيفية تخزين الأعضاء members:

    ![image|412x247](image-4.png)

    نقوم فيها بتخزين البيانات على شكل أعمدة columns وصفوف rows.

    * #### ماهو الـ column ؟

       هي الأعمدة داخل الـ table:
       ![image|412x247](image-5.png)

        وهي التي تحدد ما سنقوم بتخزينه, فمثلاً لدينا name column سنقوم بتخزين الاسم فيه, وهكذا... يعني أن الـ table محدود بالـ columns التي فيه.

      * #### كيف تقوم ببناء الـ columns ؟

        فقط يجب أن تحدد اسم الـ column مثل name أو age.

       * #### ولكن ماذا حول نوع البيانات data type (رقم, نصوص, تاريخ) ؟

         يجب عليك تحديد الـ data type داخل العمود الذي سنقوم بتخزينه فمثلاً اسم الشخص هو string, وليس number.

    * #### ماهي rows ؟

       هي الصفوف داخل الجدول

       ![image|412x247](image-6.png)


       كل row يمثل entity واحدة, مثلاً الصف الثالث يمثل شخص عضو اسمه John, وعمره 25.

       * #### كيف يمكن التفريق بين الـ row الثالث والأول ؟

         الأمر بسيط, فقط نستعمل ما يسمى primary key, لاحظ أن كل شخص لديه id خاص به, هذا هو الـ primary key الخاص بكل row في حالتنا.

       * #### من أين تأتي هذه الأرقام بالترتيب ؟

         يقوم محرك قاعدة البيانات بتوليد هذه الأرقام بالطريقة التي تخصه (سواء تصاعدياً أو عشوائياً), لا يهمنا كيف يقوم بها, ولكن يهمنا أننا سنستعملها :wink: 

       * #### هل أحتاج primary key لكل table ؟

         نعم, غير هكذا لن تستطيع الوصول إلى البيانات بشكل عملي !

  * #### كيف يتم بناء العلاقات بين الـ tables ؟

    الأمر بسيط جداً, نستعمل ما يسمى بـ foreign key, مثال على شكل المواضيع posts وعلاقتها بالأعضاء members:

    ![image|391x273](image-7.png)

    لاحظ أن كل post لديه member_id مرتبط مع الـ id الخاص بالعضو.

    * #### ماهي القاعدة التي يجب تذكرها عند بناء العلاقات ؟

      يجب أن يشير الـ foreign key إلى الـ primary key الخاص بـ table آخر !

      ![image|690x153](image-8.png)

  * #### ماهي اللغة المشهورة في التعامل مع البيانات ذو علاقات relational data ؟

    بالتأكيد هي لغة SQL المعروفة :smile:

* ### ماهي Structured Query Language - SQL ؟

  هي اللغة التي نستعملها **تصميم قواعد البيانات**, وعمل استعلامات للإجابة عن الأسئلة خاصتنا (**queries**).

  أغلب السوق software industry يستعملها بشكل كبير جداً حتى اللحظة 2018 !

  * #### ماهي أشهر قواعد البيانات Relational Database Engines ؟

     * #### قواعد بيانات MySQL:

       فيسبوك يستعملها أيضاً... مجانية وسهلة التنصيب بعكس Oracle.

     * #### قواعد بيانات محلية SQLLite:

       خفيفة جداً, وتأتي مع بايثون ويمكن العمل عليها مباشرة, بدون وجع رأس !

       لا ينصح إستعمالها في موقع يستعمله الكثير من الزوار في نفس الوقت لأنها لا تدعم concurrency... لكنها جميلة في حال كان التطبيق يستعمله شخص واحد.

       هل تعلم أن whatsapp يقوم بعمل قاعدة البيانات الخاصة بالرسائل داخل تلفونك, باستعمال sqllite :smile: 

    * #### منتج مايكرسوفت MSSQL:

       بالتأكيد لدى شركة مايكروسوفت منتج عملاق خاص بقواعد البيانات, لإدارة السيرفرات وهو SQL Server وهو يستعمل لغة TSQL المتفرعة من SQL.

       الكثير من الـ enterprise apps تتعامل مع MSSQL ولغة برمجة C# !

    * #### قواعد بيانات Oracle:

       شركة Oracle لديها المنتج المنافس لشركة مايكروسوفت, بالإضافة إلى لغة برمجة Java.

    * #### قواعد بيانات PostgreSQL:

       هل تريد شيء يجمع بين قوة SQL Server وبين سهولة MySQL, توفر لك PostgreSQL هذا الأمر.

       وهي المتاحة بشكل مجاني في هيروكو... لهذا سنستعملها.

* ### كيف نقوم بالعمل على قواعد البيانات مع Flask ؟

  * #### سنحتاج إلى SQL Alchemy

    قم بإضافة السطر إلى ملف requirements.txt:

    ```
    Flask-SQLAlchemy==2.3.2
    ```

    وسيساعدك PyCharm في تنصيب الحزمة (بدلاً من استعمال pip install).

    في حال كنت لا تستعمل PyCharm, ستحتاج إلى كتابة الأمر pip install Flask-SQLAlchemy.

  * #### ماهو SQL Alchemy ؟

    الاسم مثير... خيميائي SQL :smile:

    ببساطة هو عبارة عن Object Relational Mapper, اختصاراً لـ ORM.

    * #### مالذي يقوم به الـ ORM ؟

      يقوم بتحويل python إلى sql حسب الـ objects الذي تتعامل معها.

      بحيث لا داعي أن تستعمل أوامر sql المعروفة raw sql :confounded:

      فبدلاً من كتابة `select * from members`, سنستعمل `models.Member.query.all`

    * #### هل معنى هذا أنني لا أحتاج لتعلم لغة SQL ؟

      لن تحتاجها كثيراً, لأن الـ ORM سيقوم بترجمة أوامر بايثون إلى queries بدون أي تعب.

      لكن يجب عليك تعملها مستقبلاً في حال واجهت مشكلة أن الأوامر التي كتبتها بطيئة, يجب عليك قراءة الـ queries الناتجة بلغة SQL ومحاول اكتشاف الخلل.

* ### بعد تنصيب SQL Alchemy, مالذي نحتاج لتغييره ؟

  نحتاج أولاً أن نقوم بجعل الـ models على طريقة sql alchemy, لكتابة الـ tables بالشكل المناسب.

  قم بعمل نسخة من ملف models.py إلى models_inmemory.py, بحيث النسخة القديمة التي داخل الذاكرة in memory لن نتعامل معها.

  وأيضاً قم بنفس الأمر مع stores.py و tests.py.

  ليصبح شكل الملفات هكذا:

  ![image|177x323](image-9.png)

* ### كيف نجعل البرنامج يعرف أننا نستعمل الـ db ؟

  فقط تضيف هذه الأسطر في الملف `__init__.py` بحيث تجعل محتواه بهذا الشكل:

```
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
import os

app = Flask(__name__)

folder_path = os.path.abspath(os.path.dirname(__file__))
app.config["SQLALCHEMY_DATABASE_URI"] = f"""sqlite:///{os.path.join(folder_path, "my_database.db")}"""
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = True
db = SQLAlchemy(app)

from app import stores, dummy_data

member_store = stores.MemberStore()
post_store = stores.PostStore()
dummy_data.seed_stores(member_store, post_store)

from app import views
from app import api
```

لاحظ السطر المسؤول عن بدء قاعدة البيانات `db = SQLAlchemy(app)` حيث يجب ادخال app عند بناء SQLAlchemy.

وأيضاً قمنا بجعل الـ connection string من عند sqllite الموجودة مع بايثون, بحيث يتم وضع **ملف لقاعدة البيانات** اسمه my_database.db.

* #### ماهي connection string ؟

  هي نص يقوم به البرنامج بالاتصال مع قاعدة البيانات, بحيث لا يمكن لبرنامج أن يتصل بقاعدة البيانات إلا به !

  في حالتنا قمنا بوضعها داخل `app.config["SQLALCHEMY_DATABASE_URI"]` لكي يتعامل معها sql alchemy.

* ### كيف سيصبح شكل الـ models لعملها كـ tables ؟

  بداية سنقوم بحذف `def __init__` لأننا لا نحتاجها, ثم نقوم بوضع الـ columns باستعمال class attributes:

```
from app import db


class Member(db.Model):

    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(50))
    age = db.Column(db.Integer)
    posts = db.relationship("Post", backref = "members")

    def __repr__(self):
        return f"Id: {self.id}, Name: {self.name}, Age: {self.age}"

    def as_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "age": self.age,
            "posts": self.posts,
        }


class Post(db.Model):

    id = db.Column(db.Integer, primary_key = True)
    title = db.Column(db.String(50))
    content = db.Column(db.String(800))
    member_id = db.Column(db.Integer, db.ForeignKey("member.id"))

    def __repr__(self):
        return f"Title: {self.title}, Content: {self.content}"

    def as_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "content": self.content,
            "member_id": self.member_id,
        }
```

* ### ماهي التغييرات التي طرأت على models بالضبط ؟

  * #### كيف يتم جعل الـ model جزء من الـ database ؟

    الأمر سهل, فقط تجعل الـ member والـ post يقوموا بعمل inherit من db.Model

  * #### كيف يتم عمل الـ columns ؟

    فقط تقوم بكتابة النوع واسم الحقل, مثل name, ثم تكتب النوع String... وحجمه 50 حرف, يعني لا يمكن أن يتجاوز طول الاسم أكثر من 50 حرف في قاعدة البيانات خاصتنا, بإمكانك تغيير الحجم حسب ما يناسب :wink:

  * #### كيف نقوم بتحديد الـ primary key ؟

    تكتب داخل الحقل primary key = True لا أكثر :smile: 

   * #### كيف يتم عمل العلاقة one-to-many ؟
     كما اتفقنا يجب ربط الـ member بالعديد من الـ posts, لذا نكتب في كلاً من Member & Post class العلاقة بينهم:

     ```
     # in Member class
     posts = db.relationship("Post", backref = "members")

     # in Post class
     member_id = db.Column(db.Integer, db.ForeignKey("member.id"))
     ```

  * #### لماذا غيرنا str إلى repr ؟

    الكلمة repr هي اختصار لـ representation, لا يهم تغيير str إلى repr ولكن لمجرد التنظيم لا أكثر... لأن str تستعمل عند عرض البيانات للمستخدم **وrepr للمطور** ! 

  * #### لماذا غيرنا dict إلى as_dict؟

    لأن sql alchemy يستعمل dict بطبيعة الحال, لذا يجب تغيير اسم الدالة إلى شيء آخر مثل as_dict اختصاراً لـ as dictionary.

* ### ماهي التغييرات التي سنقوم بها على dummy_data.py ؟

  أهم شيء هو طريقة بناء الـ object الجديدة بدلاً من:

      models.Member("Mohammed", 20)

  نقوم بكتابة:

      models.Member(name="Mohammed", age=20)

   وأيضاً نقوم بعمل create_all لبناء الأعمدة و drop_all لحذفها, يصبح لدينا شكل الملف dummy_data.py:

```
from app import models, db

dummy_members = [
    models.Member(name="Mohammed", age=20),
    models.Member(name="Mohammed", age=22),
    models.Member(name="Abdo", age=25),
]

dummy_posts = [
    models.Post(title="Agriculture", content="Agriculture is amazing", member_id=1),
    models.Post(title="Engineering", content="I love engineering", member_id=1),

    models.Post(title="Medicine", content="Medicine is great", member_id=2),
    models.Post(title="Architecture", content="Spectacular art", member_id=2),
    models.Post(title="Astronomy", content="Space is awesome", member_id=2),

    models.Post(title="Geology", content="Earth is our friend", member_id=3),
    models.Post(title="ComputerSci", content="Our passion", member_id=3),
    models.Post(title="Algorithms", content="Yeah, more of that", member_id=3),
    models.Post(title="Operating Systems", content="Ewww", member_id=3),
]


def seed_stores(member_store, post_store):
    db.drop_all()
    db.create_all()

    for member in dummy_members:
        member_store.add(member)

    for post in dummy_posts:
        post_store.add(post)
```

* ### بقي التعديل على ملف stores.py... لكي نجعل التعامل مع قاعدة البيانات سليم:

  لاحظ كيف نقوم بالـ queries هنا بحيث يمكنك عمل `models.Member.query.get(id)` لعمل get_by_id... 

  * ملحوظة: الدالة get_top_two لا تعمل جيداً... لم أقم بإصلاحها !

  بإمكانك الإطلاع على البقية:

```
from app import models, db
from sqlalchemy import desc, func


class BaseStore():

    def __init__(self, data_provider):
        self.data_provider = data_provider

    def get_all(self):
        return self.data_provider.query.all()

    def add(self, entity):
        db.session.add(entity)
        db.session.commit()
        return entity

    def get_by_id(self, id):
        return self.data_provider.query.get(id)

    def update(self, entity, fields):
        result = self.data_provider.query.filter_by(id = entity.id).update(fields)
        db.session.commit()
        return result

    def delete(self, id):
        result = self.data_provider.query.filter_by(id = id).delete()
        db.session.commit()
        return result

    def entity_exists(self, entity):
        result = True

        if self.get_by_id(entity.id) is None:
            result = False

        return result


class MemberStore(BaseStore):

    def __init__(self):
        super().__init__(models.Member)

    def get_by_name(self, member_name):
        return self.data_provider.query.filter_by(name = member_name)

    def update(self, entity):
        fields = {"name": entity.name, "age": entity.age}
        return super().update(entity, fields)

    def get_members_with_posts(self):
        return self.data_provider.query.join(models.Member.posts)

    def get_top_two(self):
        return self.data_provider.query(func.count(models.Member.posts).label('total')).order_by('total DESC')


class PostStore(BaseStore):

    def __init__(self):
        super().__init__(models.Post)

    def update(self, entity):
        fields = {"title": entity.title, "content": entity.content}
        return super().update(entity, fields)
```

* ### كيف نقوم بتجربة التعديلات الحالية ؟

  قم بنسخ النسخة الجديدة من الـ tests من هنا:
  https://raw.githubusercontent.com/0xRumple/forums-flask/master/app/tests.py

  هنا يجب أن تتوقف وتقوم بتجربة tests.py لأنه يجب أن يعمل بشكل صحيح... قبل الانتقال إلى التعديلات على views و api.

  أول ما تقوم بتشغيل tests.py سيقوم بنناء ملف my_database.db وبإمكانك فتحها باستعمال هذا البرنامج:

  http://sqlitebrowser.org

  تقوم بفتح ملف قاعدة البيانات ويظهر لك البيانات بهذا الشكل:

  ![image|690x289](image-10.png)

* ### هل يوجد تغييرات على views.py ؟

  هنا لدينا الـ controllers, يعني لا يلزمنا الكثير... لأنه يتعامل مع stores وليس مع الـ database بشكل مباشر.

  فقط **التعديل المهم هو كيفية بناء الـ object** بهذا الشكل:

      new_post = models.Post(title = request.form["title"], content = request.form["content"])

* ### لا تنسى إصلاح الـ api.py بنفس ما قمت به في views.py.

  يفترض أن يعمل لديك الموقع بشكل صحيح (ليس على Heroku وإنما محلياً)... يجب أن تجرب الموقع كاملاً, مع الـ api في هذه النقطة.

  لاحظ كمية التعديلات التي قمنا بها ليست كثيرة جداً...

   بإمكانك تخيل في حال كان views.py يتعامل مع قاعدة البيانات بشكل مباشر بدون stores, ستحتاج أن تعدل كل function بشكل منفصل, وإذا كان موقع كبير فيه العديد من الـ controller actions ربما ستتركه كما هو :sweat_smile:

* ### لاتنسى أيضاً حذف السطر الخاص بملئ قاعدة البيانات فنحن لا نحتاجه:

      #dummy_data.seed_stores(member_store, post_store)

* ### بقي الآن استعمال Postgre SQL... لماذا أصلاً Postgre ؟

  الأمر بسيط, لأن Heroku يدعمها بشكل مجاني, ونحن نحب المجاني :grin: 

  * #### هل الأمر سهل ؟

     كما ترى... التطبيق خاصتنا لديه architecture جيدة, أي أن التعديل على نوعية قاعدة البيانات بسيط جداً :wink:

     فقط تحتاج لإضافة السطر إلى requirements.txt:

         psycopg2==2.7.4

    ثم غير سطر تجهيز الـ connection string إلى:

         app.config["SQLALCHEMY_DATABASE_URI"] = os.environ['DATABASE_URL']

    أي أنه سيقوم بأخذها من الـ environment variable التي هو فيها.

    تهانينا, أصبح برنامجك يدعم Postgre :smile:

  * #### قم بعمل push على هيروكو, لترى أن لا يعمل... مالسبب ؟

    التطبيق يدعم التعامل مع قاعدة البيانات, ولكنها غير موجود أصلاً !

    * #### كيف نقوم بعمل قاعدة البيانات ؟ 

      فقط أدخل على موقع Heroku ثم التطبيق خاصتك, ومن تبويب Resources اكتب postgre في الإضافات add-ons

      ![heroku-postgre|690x464](image-11.png)

      قم بعدها بتشغيل التطبيق وسترى أنه يعمل بدون مشاكل !

    * #### ولكن أين الـ connection string ؟

      قام Heroku بشكل تلقائي بإضافاتها على settings الخاصة بالتطبيق خاصتك, لاحظ اسمها DATABASE_URL كما سميناها في environment variable config بالأعلى :

      ![heroku-postgre-settings|673x381](image-12.png)

* ### كيف أقوم بالاتصال على قاعدة البيانات من جهازي الشخصي ؟

  كما نعرف أن Heroku سيقوم بعمل قاعدة بيانات على PostgreSQL Server أي أنه سيرفر خاص لبناء قواعد بيانات PostgreSQL

  لكن, نريد أن نرى قاعدة البيانات خاصتنا, كيف نتصل بها, باستعمال أي Postgre client ؟

  أعتقد أنك تعرف الإجابة, إنها connection string فهي تحتوي على عنوان السيرفر واليوزر والباسورد والبورت واسم قاعدة البيانات بهذا الشكل على Heroku:

      DATABASE URL: postgres://user3123:passkja83kd8@ec2-117-21-174-214.compute-1.amazonaws.com:6212/db982398

  أي أن البيانات هنا هي:

      user = user3123
      password = passkja83kd8
      host = ec2-117-21-174-214.compute-1.amazonaws.com
      port = 6212
      database name = db982398

  * #### كيف أستعمل هذه البيانات  للوصول إلى قاعدة البيانات ؟

     سنستعمل أي برنامج PostgreSQL client, مثل DBeaver لكي يتصل عليها... يوجد برامج أخرى كثيرة, للتحميل:
     https://dbeaver.jkiss.org/download/

     بعد تحميله تقوم بعمل Test Connection بهذا الشكل (صورة متحركة):

     ![postgre-connect-db|690x498](image-13.gif)

  * #### كيف نطلع على الـ Topics الموجودة داخل قاعدة البيانات ؟

     الأمر سهل, تابع معي (صورة متحركة):

     ![postgre-show-data|690x498](image-14.gif)


 * ### ماهي المهمة المطلوبة ؟

   قم بجعل برنامجك يتعامل مع الـ database بدلاً من الذاكرة... ولا تنسى أن ترفعه على Heroku.

* ### ملحق:

  * ماهو SPA:
    https://www.quora.com/Does-Single-Page-App-SPA-mean-an-app-that-has-only-one-page-on-the-website

  * مقال Uncle Bob الشهير:
     http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html

  * ماهي relational db:
     https://code.tutsplus.com/tutorials/relational-databases-for-dummies--net-30244

  * متى نستعمل No SQL:
    https://www.slideshare.net/Couchbase/webinar-making-sense-of-nosql-applying-nonrelational-databases-to-business-needs

   * احصائيات Stackoverflow من جميع المطورين لعام 2018 لأشهر Db مستعملة:
     https://www.eversql.com/most-popular-databases-in-2017-according-to-stackoverflow-survey/

   * اساسيات sql alchemy:
     http://flask-sqlalchemy.pocoo.org/2.3/quickstart/

   * العلاقات في sql alchemy:
     http://flask-sqlalchemy.pocoo.org/2.3/models/

   * استعمال postgre مع flask:
      https://realpython.com/blog/python/flask-by-example-part-2-postgres-sqlalchemy-and-alembic/

 * ### كيفية تسليم الحل ؟

    ارفع التحديثات على حسابك في GitHub في نفس المستودع (repository), **بالتعديل على نفس الملفات**.

   ولا تنسى **مشاركة رابط المشروع** معنا.

    بإمكانك تسليم الحل في هذا الموضوع:
    https://macdiscussions.udacity.com/t/44-database/137913

  #### أتمنى الفائدة والتوفيق للجميع!